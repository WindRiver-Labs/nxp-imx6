        i.MX6Q Sabre-SD/i.MX6SX Sabre-SDB Board Support Package

1. About this document
======================

This document describes common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with Wind River
Linux and the wr-kernel layer.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the nxp-imx6 layer
---------------------------
This layer and wr-kernel layer should be added to bblayers.conf. This
is done automatically when using the Wind River configure wrapper.

License
-------
Copyright (C) 2017 Wind River Systems, Inc.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement. No license to Wind River intellectual properly rights is granted
herein. All rights not licensed by Wind River are reserved by Wind River.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.

2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+-------------+-------------+
  | valid/distro |   wrlinux   | wrlinux-cgl | wrlinux-ovp |
  +--------------+-------------+-------------+-------------+
  |    valid     |      Y      |      N      |      N      |
  +--------------+-------------+-------------+-------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e | grep "^TARGET_SUPPORTED_KTYPES"'.

Note: The preempt-rt kernel type can be used with this BSP/Machine.


3. Board Specific Patches
=========================
To get a list of patches applied to the kernel specific to this BSP,
along with patch descriptions, use git to see what changed on the default
kernel (git whatchanged <kernel_type>..<bsp_name>). For example:

	# cd tmp-glibc/work-shared/nxp-imx6/kernel-source
	# git whatchanged standard/base..


4. Boot Instructions
====================

4.1 MMC/SD Boot
---------------

4.1.1 Create partitions
-----------------------
You can use bootloader/create-sdcard.sh to quickly create partitions:

	sudo ./create-sdcard.sh /dev/${your sdcard}

Or you can manually create partitions as follow:

(1) To identify the device node assigned to the SD/MMC card, enter the command:

	# cat /proc/partitions
	major minor	  #blocks name
	8	0	 78125000 sda
	8	1	 75095811 sda1
	8	2	        1 sda2
	8	5	  3028221 sda5
	8	32	488386584 sdc
	8	33	488386552 sdc1
	8	16	  3921920 sdb
	8	18	  3905535 sdb1

In this example, the device node assigned is /dev/sdb.

(2) Create partitions on the MMC/SD card.

Run the following shell script with sudo to create a partition.
You need to first umount your sdcard if it is mounted.

	#!/bin/bash

	#please input you sdcard device name, for example /dev/sdb
	DRIVE=""

	dd if=/dev/zero of=$DRIVE bs=1024 count=1024
	SIZE=`fdisk -l $DRIVE | grep Disk | awk '{print $5}'`
	echo DISK SIZE - $SIZE bytes
	CYLINDERS=`echo $SIZE/255/63/512 | bc`
	sfdisk -D -H 255 -S 63 -C $CYLINDERS $DRIVE << EOF
	1,12,0x0C,*
	13,,,-
	EOF

The following steps assume that the device node for the MMC/SD card on the host machine is /dev/sdb.

NOTE: The first 8 MB can be reserved for MBR, bootloader, and kernel sections,
the image partition should be located after the kernel image.

(3) Create a filesystem on the first partition.

Format it with vfat:

	# mkfs.vfat /dev/sdb1

(4) Create a filesystem on the second partition.

Format the filesystem with one of the filesystem types supported by Linux, for example, ext3.

	# mkfs.ext3 /dev/sdb2


4.1.2 Decompress MMC/SD root filesystem
---------------------------------------

Mount the new partition and deploy the root filesystem image to it:

	# mkdir /mnt/sd
	# mount /dev/sdb2 /mnt/sd
	# tar -C /mnt/sd -jxf wrlinux-image-glibc-xxx-nxp-imx6.tar.bz2 --numeric-owner


4.1.3 Deploy U-Boot, DTB and kernel to SD/MMC
----------------------------------------------

(1) Copying the Boot Loader Image

Enter the following command to copy the U-Boot image to the SD/MMC card:

	# sudo dd if=u-boot-${board name}.imx of=/dev/sdb bs=512 seek=2 conv=fsync

This command assumes a pre-build U-Boot image delivered with the BSP or built from
the U-Boot source code. The first 1 KB of the SD/MMC card, which includes
the partition table, will be preserved.

The board's boot modes are controlled by the boot configuration DIP switches. To locate 
the boot configuration switches, see the section 4.3.1 of the README.hardware file.

(2) Copy the Kernel Image and DTB to the SD/MMC

The following command will copy the kernel image to the first partition of the SD/MMC card:

	# mkdir /mnt/sd
	# mount -t vfat /dev/sdb1 /mnt/sd
	# cp -rf zImage /mnt/sd
	# cp -rf zImage-imx6q-sabresd.dtb /mnt/sd
	# cp -rf zImage-imx6sx-sabresd.dtb /mnt/sd


4.1.4 Load kernel from MMC/SD to memory
---------------------------------------
NOTE: All commands in this section are executed on the U-Boot command line.

The Sabre-AI board includes two MMC/SD controllers, only the CPU board's SD slot can 
be used. In U-Boot, assign mmc0 to it.

The Sabre-SD board includes three MMC/SD controllers: SD2, SD3, and SD4.
In U-Boot, assign mmc1, mmc2 and mmc3 to these controllers respectively.

Set the active mmc card and partition.

	# mmc dev $disk[:$partition]

For example:

	# mmc dev 0		/* Activate the mmc0 card */

Or
	# mmc dev 1		/* Activate the mmc1 card */

Note that the partition argument is optional since not all cards 
support partitions. If your card does not have this capability, do not add
the partition argument to the command. Currently there is no simple
non-runtime way to determine if a card supports partitions or not.


Next, load the DTB and kernel image from the activated MMC/SD card:

	# mmc rescan
	# fatload mmc $disk:1 0x12000000 zImage
	# fatload mmc $disk:1 0x18000000 ${fdt_file}

4.1.5 Set bootargs and boot system
----------------------------------

	For i.MX6Q/S:
	# setenv bootargs console=ttymxc0,115200 root=/dev/mmcblk{N}p${M} rw \
		 rootwait video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666
	# bootz

Use the bootargs root=/dev/mmcblk{N}p${M}, where N and M describe the disk
number and partition number.


4.2 NFS Root File System
------------------------

4.2.1 Prepare Kernel, DTB, NFS and TFTP servers
-----------------------------------------------
The files in the following example can be found in <buildprj>/tmp-glibc/deploy/images/nxp-imx6
and are copied to the export directory of the TFTP server.

4.2.2 Download kernel
---------------------

	# tftp 0x12000000 zImage

4.2.3 Download DTB
------------------

	# tftp 0x18000000 zImage-imx6q-sabresd.dtb

4.2.4 Set bootargs and boot the system
--------------------------------------

	For i.MX6Q/S:
	# setenv bootargs console=ttymxc0,115200 root=/dev/nfs rw \
		 nfsroot=<nfs server>:<nfs root>,v3,tcp \
		 ip=<target IP>::<gateway>:<netmask>::eth0:off \
		 video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666
	# bootz 0x12000000 - 0x18000000

5. Features
===========

Some peripherals and drivers have been tested using the libraries and testcases
in the imx-lib and imx-test packages. These two packages are included in the 
Freescale SDK.  You can build them under the Freescale openembedded-core layer of the
meta-fsl-arm environment. Please reference https://github.com/Freescale/meta-fsl-arm
for build details.  

After the build completes: 

* all testcases are installed to ${fsl_target_rootfs}/unit_tests, 
* all needed libs are installed to ${fsl_target_rootfs}/usr/lib, 
* all needed firmware is installed to ${fsl_target_rootfs}/lib/firmware/vpu, 
  where fsl_target_rootfs parameter points to the path of the root filesystem after 
  building the freescale SDK.

Copy the testcases to the image of the i.MX6Q Board: (assuming the target
image has been properly deployed to an MMC/SD card as in described in section 3.2):

	# cp ${fsl_target_rootfs}/unit_tests /mnt/sd -rf
	# cp ${fsl_target_rootfs}/usr/lib/libvpu.* /mnt/sd/usr/lib/ -rf
	# cp ${fsl_target_rootfs}/usr/lib/libipu.* /mnt/sd/usr/lib/ -rf
	# cp ${fsl_target_rootfs}/lib/firmware/vpu /mnt/sd/lib/firmware/ -rf
	# umount /mnt/sd


5.1 fbdev HDMI
--------------

To enable HDMI as the default framebuffer device, add:

	video=mxcfb0:dev=hdmi,1920x1080M@60,if=RGB24

to the bootargs parameter of U-Boot.

5.2 fbdev LVDS
--------------

"ldb=spl0/1"       --      split mode on DI0/1
"ldb=dul0/1"       --      dual mode on DI0/1
"ldb=sin0/1"       --      single mode on LVDS0/1
"ldb=sep0/1"       --      separate mode begin from LVDS0/1

There are two LVDS channels (LVDS0 and LVDS1) that can transfer video
data. These two channels can be used in split, dual, single, and separate 
modes.

* Split mode means display data from DI0 or DI1 will be sent
  to both channels LVDS0 + LVDS1.
* Dual mode means display data from DI0 or DI1 will be
  duplicated on LVDS0 and LVDS1. That said, LVDS0 and LVDS1
  have the same content.
* Single mode will only work for DI0/DI1->LVDS0 or DI0/DI1->LVDS1.
* Separate mode means you can make DI0/DI1->LVDS0 and DI0/DI1->LVDS1
  work at the same time.


To enable LVDS as the default framebuffer device, add:

	For the LVDS0 connection:
	video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666

	For the LVDS1 connection:
	video=mxcfb0:dev=ldb,LDB-XGA,if=RGB666 ldb=sin1

to the bootargs parameter of U-Boot.


5.3 VPU
-------

To test VPU support, ensure that the HDMI is the default fbdev. Please refer to 
section 4.1, above, to set the bootargs of U-Boot, then execute the following 
commands:

	# cd /unit_tests/
	# ./mxc_vpu_test.out -D "-i ./akiyo.mp4 -f 0 -t 1"

5.4 V4L2 output/capture and camera
----------------------------------

Enable HDMI as the default fbdev as stated in section 4.1, above, then execute
the following commands:

	# cd /unit_tests/
	# ./mxc_v4l2_overlay.out -iw 640 -ih 480 -ow 640 -oh 480 -m 0 -di /dev/video1 -fg

5.5 USB feature
---------------

5.5.1 USB OTG Usage and verification
------------------------------------

1. Verify the OTG device mode

Plug in cable B and connect to the host machine.

Board configuration:

	# ifconfig usb0 192.168.1.10

Host machine configuration:

	# sudo ifconfig usb0 192.168.1.100
	# ping 192.168.1.10 -c 2
	PING 192.168.1.10 (192.168.1.10) 56(84) bytes of data.
	64 bytes from 192.168.1.10: icmp_req=1 ttl=64 time=2.06 ms
	64 bytes from 192.168.1.10: icmp_req=2 ttl=64 time=0.286 ms
	...

2. Switch to OTG host mode

Replace cable B with cable A.


5.6 Audio
---------

5.6.1 Audio capture and playback(WM8962)
----------------------------------------

1. Capture

Set the parameters to assign the codec and then record an audio message:

	For i.MX6Q/S:
	# amixer set 'MIXINR IN3R' on
	# amixer set 'INPGAR IN3R' on

	For i.MX6UL:
	# amixer cset name='ADC PCM Capture Volume' 80%,80%
	# arecord -Dplughw:0,0 -r 44100 -f S16_LE -c 2 -d 5 record.wav

2. Playback

	For i.MX6Q/S:
	# amixer cset name='Headphone Volume' 127

	FOr i.MX6UL:
	# amixer cset name="Headphone Playback Volume" 80%,80
	# aplay  record.wav


5.6.2 Audio HDMI playback
-------------------------

Connect the board to an HDMI display with an HDMI cable,
then enable fbdev HDMI as in section 4.1, above.

Play the recorded audio messages:

	# aplay -Dhw:1,0 record.wav


5.7 Static PM
-------------

The debug UART can be set as a wakeup source with:
	# echo enabled > /sys/class/tty/ttymxc0/power/wakeup
	# echo mem > /sys/power/state

5.8 CPU frequency
------------------

CPU frequency scaling allows the clock speed of the CPU to be changed on the fly.

	# echo powersave > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
	# cat /proc/cpuinfo

5.9 Backlight
--------------

	# echo 0 > /sys/class/backlight/backlight/brightness

5.10 ANATOP thermal
-------------------

	To check current CPU temperature
	# cd /sys/class/thermal/thermal_zone0
	# cat temp
	39445
	# cat trip_point_0_type
	passive
	# cat trip_point_0_temp
	85000
	# echo 39445 > trip_point_0_temp
	System is too hot. GPU3D will work at 1/64 clock.

	# cat trip_point_1_type
	critical
	# echo 39445 > trip_point_1_temp
	The system will shutdown

5.11 Touch Screen
-----------------

	# mtdev-test /dev/input/event0

5.12 PCIe
--------

Since the on-board PCIe connector only exports the PETP0/N0, PERP0/N0 and 3.3V
pins, any mini-PCIe devices that use other PCIe pins are not supported.
The following PCIe peripherals:

	Intel Centrino Advanced-N 6205
	Intel Centrino Wireless-N 1030

can be validated using the following steps:

Simply add line as follows to ${buildprj}/build/conf/local.conf:

	KERNEL_FEATURES_append = " features/iwlwifi/iwlwifi.scc"

Include the following lines in your local.conf:

	LINUX_KERNEL_TYPE = "standard"
	KERNEL_FEATURES_append = " features/iwlwifi/iwlwifi.scc"

This will include the iwlwifi and mac80211 kernel modules in
the root filesystem.

Built and install them:

	# bitbake wrlinux-image-glibc-xxx

Copy relevant WiFi card firmware (Intel 6205 WiFi firmware: iwlwifi-6000g2a-5.ucode)
of to /lib/firmware of the target image.

Execute the following commands to validate the WiFi cards:

	# ifconfig wlan0 up
	# iwconfig wlan0 essid <AP essid>
	# dhclient wlan0
	# ping <AP address> -i wlan0 -c 1

NOTE: the PCIe driver does not support hotplug and suspend/resume.

5.13 Graphics/GPU
-----------------

Since the graphics support in the fsl-imx6 is provided via binaries,
the graphics package must be compiled according to Freescale's EULA.

Add the following to your local.conf file to configure the project:
	
	DISTRO ?= "wrlinux-std-sato"

Add the following to your bblayers.conf file:

	WRTEMPLATE ?= "feature/imx-extend-support"

NOTE:
You must change the configuration to allow downloading of packages from the
internet. Change BB_NO_NETWORK ?= "1" to BB_NO_NETWORK ?= "0" in the file
${buildprj}/conf/local.conf.

5.14 Tune
-----------------
This BSP uses "armv7athf-neon" as the default tune. It supports both
cortexa9 and cortexa7, but may not have the best optimization. If you use
this BSP for the boards "i.MX 6Quad SABRE-SD" and "i.MX 6SoloX SABRE-SD", and
want better optimization from tune, change DEFAULTTUNE from "armv7athf-neon" 
to "cortexa9thf-neon" locally in ${projectdir}/conf/local.conf.

6. kexec/kdump
==============

For discussion purposes, some useful terminology will be described here.

* boot kernel - the first kernel that you start and supports kexec, from U-Boot
	      for instance
* capture kernel - the kernel that you reboot into after a boot kernel crash

To build the boot kernel, enable kexec and kdump in your local.conf file:

	WRTEMPLATE = "feature/kexec feature/kdump"	

To reserve a memory region for the capture kernel, you need to pass the bootargs 
argument "crashkernel" as follow:

for I.MX6Q:
    crashkernel=256M@512M

For the dump-capture kernel:
Before booting the dump-capture kernel, add "maxcpus=1" to the boot parameter.
NOTE: Use zImage as a secondary kernel. It can be found in the
  build/linux-windriver/4.1-r0/linux-fsl_imx6-standard-build/arch/arm/boot
directory.

For more detailed info about kdump, refer to Documentation/kdump/kdump.txt
in the kernel source tree.

7. Creating Partitioned Images(WIC)
===================================

User can use the OpenEmbedded Image Creator, wic, to create the properly
partitioned image on a SD card. The wic command
generates partitioned images from existing OpenEmbedded build artifacts.
User can refer to the below URL to get more WIC details:

http://www.yoctoproject.org/docs/2.2/mega-manual/mega-manual.html#creating-partitioned-images

This BSP supports disk images for SD card.
After build the project, user will get a WIC image under the directory
tmp/deploy/images/<bsp name>/ ,such as:

tmp-glibc/deploy/images/nxp-imx6/wrlinux-image-glibc-std-sato-nxp-imx6-imx6q.wic
tmp-glibc/deploy/images/nxp-imx6/wrlinux-image-glibc-std-sato-nxp-imx6-imx6sx.wic

Then user can write the output image to a SD card:

Since this BSP doesn't have a firmware to read the uboot from a partition table,
WIC image only contains kernel, dtb and rootfs. We still need to write U-boot
image to SD card directly by "dd" command.

7.1 Burn images to SD card
--------------------------

To burn uboot and WIC images to SD card, user need to execute command:

For i.mx6q:
# dd if=wrlinux-image-glibc-std-sato-nxp-imx6-imx6q.wic of=/dev/your_sd_dev

For i.mx6sx:
# dd if=wrlinux-image-glibc-std-sato-nxp-imx6-imx6sx.wic of=/dev/your_sd_dev

7.2 Set uboot env
-----------------

Board can boot automatically by set the below uboot environment variables:

For i.mx6q:

=> setenv bootfile zImage; setenv fdtfile imx6q-sabresd.dtb;  setenv loadaddr 0x12000000; setenv fdtaddr 0x18000000;

=> setenv bootargs 'root=/dev/mmcblk1p2 rw rootdelay=5 console=ttymxc0,115200n8'

=> setenv bootcmd 'fatload mmc 1:1 $loadaddr $bootfile; fatload mmc 1:1 $fdtaddr $fdtfile; bootz $loadaddr - $fdtaddr';

=> saveenv; run bootcmd;

For i.mx6sx

=> setenv bootfile zImage; setenv fdtfile imx6sx-sdb.dtb;  setenv loadaddr 0x80800000; setenv fdtaddr 0x83000000;

=> setenv bootargs 'root=/dev/mmcblk2p2 rw rootdelay=5 console=ttymxc0,115200n8'

=> setenv bootcmd 'fatload mmc 2:1 $loadaddr $bootfile; fatload mmc 2:1 $fdtaddr $fdtfile; bootz $loadaddr - $fdtaddr';

=> saveenv; run bootcmd;
